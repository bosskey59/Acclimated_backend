continue
[].join("")
summary
@string_of_accessories
@string_of_items
continue
@summary_obj
continue
@datetime
datetime
self.user
summary
percip_range
self
continue
self.percip_probability
percip_probability
precip_probability
self.precip_percentage
self
continue
self
continue
self.object.weather_forecasts[-1] == nil
self.object.weather_forecasts[-1]
continue
self
self.object.weather_forecasts[-1]
continue
precip_avg
continue
@user.weather_forecasts.length<1 || ((((Time.now-@user.weather_forecasts.last.created_at.localtime)/60).to_i) > 480)
((((Time.now-@user.weather_forecasts.last.created_at.localtime)/60).to_i) > 480)
@user
continue
precips
precip_avg
continue
user_params
continue
user_params
user_params["password"]
params["password"]
user_params
continue
user_params
params
user_params
continue
((Time.now-current_user.weather_forecasts.last.created_at.localtime)/60).to_i
((Time.now.localtime-x.localtime)/60).to_i.round
(Time.now.localtime-x.localtime)/60.to_i.round
(Time.now.localtime-x.localtime)/60.round
(Time.now.localtime-x.localtime)/60.to_i
(Time.now.localtime-x.localtime)/60
(Time.now-x.localtime)/60
current_user.weather_forecasts.last.created_at.localtime
current_user.weather_forecasts.last.created_at.time
x
Time.now
(Time.now-x.localtime)/3600
x.localtime
(Time.now-x)/3600
Time.now-x
Time.diff(x, Time.now, '%y, %M, %w, %d and %H %N %S')
x-Time.now
x=current_user.weather_forecasts.last.created_at.time
Time.now
x=current_user.weather_forecasts.last.created_at
(Time.now.minutes)
(Time.now.minutes - current_user.weather_forecasts.last.created_at.minutes)
(Time.now.minutes - current_user.weather_forecasts.last.created_at.minutes).to_i
(Time.now - current_user.weather_forecasts.last.created_at)
Time.at(Time.now - current_user.weather_forecasts.last.created_at)
Time.at(Time.now - current_user.weather_forecasts.last.created_at).strftime("%M").to_i
Time.at(Time.now - current_user.weather_forecasts.last.created_at).strftime("%M").to_i > 480
continue
weather
continue
current_user.getForecast
current_user.geocode
continue
current_user.geocode
continue
current_user.geocode
continue
Time.at(Time.now - current_user.weather_forecasts.last.created_at).strftime("%M").to_i
Time.at(Time.now - current_user.weather_forecasts.last.created_at).strftime("%M")
Time.at(Time.now - current_user.weather_forecasts.last.created_at)
Time.now - current_user.weather_forecasts.last.created_at
DateTime.now - current_user.weather_forecasts.last.created_at.to_datetime
DateTime.now - current_user.weather_forecasts.last.created_at.to_time
DateTime.now - current_user.weather_forecasts.last.created_at
current_user.weather_forecasts.last.created_at.to_time 
current_user.weather_forecasts.last.created_at.to_time - n.hours
(DateTime.now.to_time.to_i - current_user.weather_forecasts.last.created_at.to_time.to_i).strftime("%M")
(DateTime.now.to_time.to_i - current_user.weather_forecasts.last.created_at.to_time.to_i).strftime(%M)
DateTime.now.to_time.to_i - current_user.weather_forecasts.last.created_at.to_time.to_i
DateTime.now.to_time.to_i
Time.now.utc.localtime.strftime("%H").to_i
Time.now.utc.localtime.strftime("%l:%M").to_i
Time.now.utc.localtime.strftime("%l:%M")
Time.now.utc.localtime.strftime.to_i
current_user.weather_forecasts.last.created_at.localtime.strftime("%l:%M").to_i
current_user.weather_forecasts.last.created_at.localtime.strftime("%l:%M")
current_user.weather_forecasts.last.created_at.localtime.strftime("%l:%M %P")
current_user.weather_forecasts.last.created_at.strftime("%l:%M %P")
current_user.weather_forecasts.last.created_at
current_user.weather_forecasts.last
current_user.weather_forecasts
continue
time
continue
precips
temp_avg
temp_lo
temp_hi
continue
temp_avg
continue
temp_avg/8
temp_avg
temp_hi
temp_lo
temp._lo
temps
continue
temp_lo
temps
temp_hi
continue
temps
continue
@@api_url
continue
@@api_url
self
api_url
exit
params["email"]
user_login_params
params
user_login_params
exit
continue
continut
JWT.decode("eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoyfQ.f5eJoxY5pTveEA-5n0Q64iOYNYzGWEzgRejlGI9R3C4", ENV["jwt_secret"], true, algorithm: 'HS256')
JWT.decode"(eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoyfQ.f5eJoxY;25pTveEA-5n0Q64iOYNYzGWEzgRejlGI9R3C4", ENV["jwt_secret"], true, algorithm: 'HS256')
JWT.decode(x, ENV["jwt_secret"], true, algorithm: 'HS256')
x=auth_header.split(' ')[1]
auth_header
params
decoded_token
